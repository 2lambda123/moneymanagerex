version: '{build}'
branches: { except: [ gh-pages ] }
clone_depth: 10 # to allow queued build jobs
image:
# tested and working but now use only latest version
- Previous Visual Studio 2017
- Previous Visual Studio 2015
- Previous Visual Studio 2013
configuration:
- Release
- Debug
platform:
- x64
- Win32

matrix:
  fast_finish: true
  exclude:
  # prefer matched VS version with toolchain
  - comp: 141
    image: Previous Visual Studio 2013
  - comp: 141
    image: Previous Visual Studio 2015
  - comp: 140
    image: Previous Visual Studio 2013
  - comp: 140
    image: Previous Visual Studio 2017
  - comp: 120
    image: Previous Visual Studio 2015
  - comp: 120
    image: Previous Visual Studio 2017
  # there are no debug versions of ucrt libs
  - comp: 140
    xp: _xp
    configuration: Debug
  - comp: 141
    xp: _xp
    configuration: Debug
  allow_failures:
  - image: Previous Visual Studio 2013
  - image: Previous Visual Studio 2015
  - image: Previous Visual Studio 2017
    configuration: Debug

environment:
  # use cache with 7z compression
  APPVEYOR_CACHE_ENTRY_ZIP_ARGS: -t7z -m0=lzma -mx=9
  # wxWidgets config
  wxVer: 3.1.0
  wxwin: c:\projects\wxwidgets-%wxVer%
  wxShared: 0
  # Use cygwin embeded gettext library
  path: '%path%;C:\cygwin64\bin;C:\cygwin\bin'
  # Microsoft toolchain options
  msbuild_opts: /maxcpucount /verbosity:minimal /p:PreferredToolArchitecture=x64
  CL: /MP
  build_tests: OFF
  matrix:
  - comp: 141
  - comp: 141
    xp: _xp
    configuration: Release
  # - comp: 140
  # - comp: 140
  #   xp: _xp
  #   configuration: Release
  # - comp: 120
  - comp: 120
    xp: _xp

init:
- if %platform:~-2%==64 (set arch=amd64) else (set arch=amd64_x86)
- echo %APPVEYOR_BUILD_WORKER_IMAGE% %platform% v%comp%%xp% %configuration% %arch%
# Set MSVS environment
- if "%VS150COMNTOOLS%"=="" set "VS150COMNTOOLS=%ProgramFiles(x86)%\Microsoft Visual Studio\2017\Community\Common7\Tools\"
- if "%WINDOWS71SDK%"=="" set "WINDOWS71SDK=%ProgramFiles%\Microsoft SDKs\Windows\v7.1\Bin\"
- if "%WINDOWS61SDK%"=="" set "WINDOWS61SDK=%ProgramFiles%\Microsoft SDKs\Windows\v6.1\Bin\"
- if %comp%==141  call "%VS150COMNTOOLS%..\..\VC\Auxiliary\Build\vcvarsall.bat" %arch%
- if %comp%==140 (call "%VS140COMNTOOLS%VsDevCmd.bat" & call "%VS140COMNTOOLS%..\..\VC\vcvarsall.bat" %arch%)
- if %comp%==120 (call "%VS120COMNTOOLS%VsDevCmd.bat" & call "%VS120COMNTOOLS%..\..\VC\vcvarsall.bat" %arch%)
- if %comp%==110 (call "%VS110COMNTOOLS%VsDevCmd.bat" & call "%VS110COMNTOOLS%..\..\VC\vcvarsall.bat" %arch%)
- if %comp%==100  call "%WINDOWS71SDK%SetEnv.cmd" /%arch% /%configuration%
- if %comp%==90   call "%WINDOWS61SDK%SetEnv.cmd" /%arch% /%configuration%
# Set wxWidgets library paths
- set "wxLibFolder=vc%comp%%xp%"
- if %platform:~-2%==64 set "wxLibFolder=%wxLibFolder%_x64"
- if %wxShared%==0 (set wxLibFolder=%wxLibFolder%_lib) else (set wxLibFolder=%wxLibFolder%_dll)
- set "wxCache=C:\cache\wxwidgets-%wxVer%-%configuration%"

cache:
- '%wxCache%\%wxLibFolder%'

install:
# Patch CMake
- patch -d "%ProgramFiles(x86)%\CMake\share\cmake-3.8\Modules" --verbose < util\FindwxWidgets-SupportWinXPBuilds.patch
# wxWidgets, build script from build/tools/msvs/officialbuild.bat
- |-
  git clone -q --depth 1 --branch "v%wxVer%" https://github.com/wxWidgets/wxWidgets.git "%wxwin%"
  if %configuration%==Release set "wxConf=BUILD=release"
  if not %platform:~-2%==64 set "wxFlags=CPPFLAGS=/arch:SSE CFLAGS=/arch:SSE"
  if exist "%wxCache%\%wxLibFolder%" (set wxB=rem) else (set wxC=rem)
  %wxC% echo Using wxWidgets from %wxCache%\%wxLibFolder%
  %wxC% xcopy /i /s /q /y "%wxCache%\%wxLibFolder%" "%wxwin%\lib\%wxLibFolder%"
  %wxB% echo Building wxWidgets %wxVer%
  %wxB% cd %wxwin%\build\msw
  %wxB% nmake /s /f makefile.vc %wxConf% COMPILER_VERSION=%comp%%xp% TARGET_CPU=%platform% DEBUG_INFO=default SHARED=%wxShared% %wxFlags%
  %wxB% echo Copying wxWidgets to %wxCache%\%wxLibFolder%
  %wxB% xcopy /i /s /q /y "%wxwin%\lib\%wxLibFolder%" "%wxCache%\%wxLibFolder%"

before_build:
- cd %APPVEYOR_BUILD_FOLDER%
- git submodule update -q --init

build_script:
- mkdir build & cd build
- if "%APPVEYOR_BUILD_WORKER_IMAGE:~-4%"=="2013" set "gen=12 2013"
- if "%APPVEYOR_BUILD_WORKER_IMAGE:~-4%"=="2015" set "gen=14 2015"
- if "%APPVEYOR_BUILD_WORKER_IMAGE:~-4%"=="2017" set "gen=15 2017"
- if %platform:~-2%==64 set "gen=%gen% Win64"
- if %configuration%==Debug set "cmake_def=-DCMAKE_INSTALL_DEBUG_LIBRARIES=ON -DCMAKE_INSTALL_DEBUG_LIBRARIES_ONLY=ON -DCMAKE_INSTALL_UCRT_LIBRARIES=ON"
- if "%xp%"=="_xp" set "cmake_def=%cmake_def% -DCMAKE_INSTALL_UCRT_LIBRARIES=ON"
- cmake -T v%comp%%xp%,host=x64 -G "Visual Studio %gen%" %cmake_def% ..
- cmake --build . --target package --config %configuration% -- %msbuild_opts%

test: off

after_build:
# rename and move
- if %configuration%==Debug set "pkgsuff=-debug"
- for %%f in (*.exe *.zip) do if /i %%~xf==.exe (move "%%f" "..\%%~nf%xp%%pkgsuff%.exe") else (move "%%f" "..\%%~nf%xp%%pkgsuff%-portable.zip")
# calculate checksums
- cd %APPVEYOR_BUILD_FOLDER%
- for %%f in (*.exe *.zip) do sha512sum "%%f" > "%%f.sha512"

artifacts:
  - path: '*.exe'
    name: installer
  - path: '*.zip'
    name: portable
  - path: '*.sha512'
    name: checksum

deploy:
  description: 'release created by AppVeyor CI'
  provider: GitHub
  auth_token: '%GitHub_auth_token%'
  draft: true
  prerelease: true
  on:
    appveyor_repo_tag: true # deploy on tag push only
    configuration: Release  # Debug contains non-redist MS DLLs

#notifications:
#- provider: Slack
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    channel: '#appveyor'
